1.关于 C 语言的源程序的叙述中，错误的是( C )

A、C 语言的源程序由函数构成

B、main 函数可以书写在自定义函数之后

C、必须包含有输入语句

D、一行可以书写多个语句

2.关于 C 语言数据类型的叙述，正确的是 ( C )

A、枚举类型不是基本类型

B、数组不是构造类型

C、变量必须先定义后使用

D、 不允许使用空类型

3.C 语言的函数体由( B )括起来

A、( )

B、{ }

C、[ ]

D、/**/

4.下面关于C 语言用户标识符的描述，正确的是( D )。

A、不区分大小写

B、用户标识符不能描述常量

C、类型名也是用户标识符

D、用户标识符可以作为变量名

5.以下( D ) 是正确的变量名

A、5f

B、if

C、f.5

D、_f5

6.若有说明语句:char c = '\95':则变c包含( B )个字符

A、1

B、2

C、3

D、语法错误

7.char 型变量存放的是( A )。

A、ASCII代码值

B、字符本身

C、十进制代码值

D、十六进制代码值

8.对于整型变量x,与 while(!x)等价的是( B )

A、while(x!=0) 

B、while(x==0)

C、while(x!=1)

D、while(~x)

9.下面叙述正确的是( B )。

A、2/3与2.0/3.0等价

B、(int)2.0/3与2/3等价

C、++5与6等价

D、A'与"A"等价

10.已知 double a;使用 scanf( )函数输入一个数值给变量a,正确的函数调用是( A )

A、scanf("%ld",&a);

B、scanf("%d",&a):

C、scanf("%7.2f,&a):

D、scanf("%lf",&a):

11.下面叙述中,( A )不是结构化程序设计三种基本结构的共同特点

A、先判断后执行

B、单入口，单出口

C、程序中没有执行不到的语句

D、无死循环

12.以下运算符中优先级最高的是 ( D )

A、>

B、||

C、&&

D、+

13.C 语言对 if 嵌套语句的规定: else 总是与( B )配对

A、第一个if

B、之前最近的且尚未配对的 if

C、缩进位置相同的if

D、之前最近的if

14、以下程序的运行结果是 ( C )

```
	void main()
	{
        int n='c'.
        switch(n--)
        {
        default: printf("error ");
        case 'a':
        case 'b': printf("good ");break;
        case 'c': printf("pass ");
        case 'd': printf("warn ");
        }
    }
```

A、error

B、good

C、error good

D、warn

15.若有定义:int a[3]={0,1,2}:则 a[1]的值为( B )

A、0

B、1

C、2

D、3

16.有如下定义int a[ ] [3]={1，2，3，4，5，6，7，8};则数组 a 的行数是( B )

A、2

B、3

C、4

D、无法确定的

17、若有定义 int a[ ] [3]={1,2,3,4,5,6,7,8,9}:则表达式sizeof(a)/sizeof(a[0])的值为( A )

A、3

B、4

C、5

D、9

18.设有以下变量定义:
char str1[]="string",str2[8]. * str3, * str4="string";( A )是正确的。
A、strcpy(str1,"China");
B、str2="China";
C、strcpy(*str3,"China");
D、strcpy(str4[0],"China"):

19.若有定义:#define PI 3,则表达式 PI * 2 * 2 的值为( A )。

A、12

B、4

C、3

D、不确定

20.对于基类型相同的两个指针变量之间，不能进行的运算是 ( C )。

A、<

B、=

C、+

D、-

判断：

1. 任何表达式语句都是表达式加分号组成的( X )
2. 在 switch 语句中，每一个的 case 常量表达式的值可以相同( √ )
3. do-while循环和 while 后的分号可以省略 ( X )
4. C语言函数返回类型的默认定义类型是void( X )
5. 可以用一个指针变量指向一个函数，然后通过该指针变量调用此函数( √  )
6. 枚举类型中的元素都具有一个整型值 (  )
7. case 语句后如果没有break，顺序向下执行( √  )
8. 数组名能与其他变量名相同，数组名后是用方括号括起来的常量表达式，不能用圆括号( X )
9. 函数形参的存储单元是动态分配的 ( √ )
10. int(*p)[4]它表示p是一个指针数组，它包含4个指针变量元素( X )

**一、**结构化程序有几种结构，有何特点：

结构化程序设计是一种编程方法，它旨在通过使用清晰、有组织的控制结构来提高程序的可读性、可维护性和可理解性。结构化程序设计通常具有以下三种主要结构：

1. 顺序结构（Sequential Structure）：
   - 特点：程序按照从上到下的顺序依次执行，每条语句只执行一次。
   - 示例：顺序结构是基本的编程结构，例如在一段代码中，语句A执行完后才会执行语句B。

2. 选择结构（Selection Structure）：
   - 特点：根据某个条件的真假，程序选择性地执行不同的代码块。
   - 示例：条件语句如if语句和switch语句是选择结构的代表，它们根据条件的评估结果来选择执行不同的分支代码块。

3. 循环结构（Repetition Structure）：
   - 特点：允许程序多次执行同一块代码，直到满足特定条件为止。
   - 示例：循环结构通常使用for循环、while循环或do-while循环来实现，这些循环会重复执行一组语句，直到循环条件不再满足。

结构化程序设计的特点包括：

- 可读性：结构化程序具有清晰的层次结构，易于阅读和理解，减少了代码的复杂性。
- 可维护性：由于程序结构明确，更容易进行调试和维护。
- 可靠性：结构化程序减少了错误的发生概率，因为控制结构明确，不容易出现死循环或其他问题。
- 可测试性：代码块之间的清晰分离使单元测试和集成测试更容易进行。
- 可移植性：结构化程序更容易在不同的平台和编程环境中移植和重用。



**二、**说明前置的++运算符和后置的++运算符的区别

前置的"++"运算符和后置的"++"运算符都是用于增加变量的值的运算符，但它们在操作时有一些重要的区别。

1. 前置"++"运算符（++variable）：
   - 先对变量进行自增操作，然后返回自增后的值。
   - 在表达式中使用时，会先增加变量的值，然后返回增加后的值，最后将其赋给其他变量或用于表达式计算。

   例如：
   ```c
   int x = 5;
   int y = ++x;
   // x现在的值为6，y的值也为6
   ```

2. 后置"++"运算符（variable++）：
   - 先返回变量的当前值，然后再对变量进行自增操作。
   - 在表达式中使用时，会返回变量的原始值，然后再执行自增操作。

   例如：
   ```c
   int x = 5;
   int y = x++;
   // x现在的值为6，y的值为5
   ```

总结：
- 前置"++"运算符先增加变量的值，然后返回增加后的值。
- 后置"++"运算符先返回变量的原始值，然后再增加变量的值。

这两个运算符的区别在于它们的执行顺序，这可能会在某些情况下产生不同的结果。根据具体的需求和编程场景，您可以选择使用前置"++"或后置"++"运算符。



**三、**说明while循环和do while 循环的区别

`while` 循环和 `do-while` 循环是两种不同的循环结构，它们之间的主要区别在于条件的检查时机。

1. `while` 循环：
   - `while` 循环首先检查循环条件，如果条件为真，才会执行循环体内的代码块。
   - 如果条件一开始就为假，循环体内的代码块将永远不会被执行。

   以下是 `while` 循环的基本结构：

   ```c
   while (condition) {
       // 循环体内的代码
   }
   ```

2. `do-while` 循环：
   - `do-while` 循环首先执行循坏体内的代码块，然后再检查循环条件。
   - 这意味着 `do-while` 循环体内的代码块至少会执行一次，即使条件一开始就为假。

   以下是 `do-while` 循环的基本结构：

   ```c
   do {
       // 循环体内的代码
   } while (condition);
   ```

总结：
- `while` 循环在执行循环体之前检查条件，如果条件一开始就为假，则循环体不会执行。
- `do-while` 循环在执行循环体之后检查条件，保证循环体至少执行一次，即使条件一开始为假。

选择使用哪种循环结构取决于具体的需求。如果您需要确保循环体至少执行一次，可以使用 `do-while` 循环。如果您只想在条件为真时执行循环体，可以使用 `while` 循环。

**四、**说明break和continue的区别

`break` 和 `continue` 是两种用于控制循环行为的关键字，它们在循环中的作用不同，有以下区别：

1. `break`：
   - `break` 用于终止循环的执行，即使循环条件仍然为真。
   - 当 `break` 语句执行时，循环会立即终止，程序将跳出循环体，然后继续执行循环后的代码。

   示例：
   ```c
   for (int i = 1; i <= 5; i++) {
       if (i == 3) {
           break;  // 当i等于3时终止循环
       }
       printf("%d\n", i);
   }
   ```

   输出结果：
   ```
   1
   2
   ```

2. `continue`：
   - `continue` 用于跳过当前循环迭代中剩余的代码，直接进入下一次循环迭代。
   - 循环的条件仍然会被重新检查，然后决定是否执行下一次迭代。

   示例：
   ```c
   for (int i = 1; i <= 5; i++) {
       if (i == 3) {
           continue;  // 当i等于3时跳过当前迭代，进入下一次迭代
       }
       printf("%d\n", i);
   }
   ```

   输出结果：
   ```
   1
   2
   4
   5
   ```

总结：
- `break` 用于完全终止循环，退出循环体。
- `continue` 用于跳过当前迭代中的代码，继续下一次迭代。
- 使用 `break` 可能会提前结束整个循环，而 `continue` 只是跳过当前迭代。
- 选择使用哪个关键字取决于您的具体需求，以控制循环的行为。

**五、**什么是指针，说明在指针运算中 * 运算符和 & 运算符的作用

指针是一种特殊的数据类型，它用来存储其他变量的内存地址。指针包含目标变量的内存地址，允许程序访问和修改这个地址上存储的数据。在C和C++等编程语言中，指针是一种强大的工具，用于直接操作内存，实现动态内存分配、数据结构和高效的编程。

在指针运算中，`*` 运算符和 `&` 运算符扮演了重要的角色：

1. `*` 运算符（取值运算符）：
   - `*` 运算符用于访问指针指向的内存地址上的值。
   - 通过 `*` 运算符，您可以获取指针所指向的变量的值。

   示例：
   ```c
   int x = 10;
   int *ptr = &x; // 声明一个指向int类型的指针，指向变量x的地址
   int y = *ptr;  // 使用*运算符获取ptr指向的变量x的值，y现在的值为10
   ```

2. `&` 运算符（取地址运算符）：
   - `&` 运算符用于获取变量的内存地址。
   - 通过 `&` 运算符，您可以获得变量的地址，然后将其分配给指针。

   示例：
   ```c
   int x = 10;
   int *ptr = &x; // 使用&运算符获取变量x的地址，并将其赋给指针ptr
   ```

总结：
- `*` 运算符用于访问指针所指向的内存中的值。
- `&` 运算符用于获取变量的内存地址，以便创建指向该变量的指针。
- 指针运算允许您通过指针访问、修改和传递变量的地址，是编程中的重要工具，但需要谨慎使用以避免潜在的内存错误。
